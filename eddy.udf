
//
// nekRS User Defined File
//
#include "udf.hpp"
#include <cstdio>

static dfloat P_U0;
static dfloat P_V0;
static dfloat P_OMEGA;


#ifdef __okl__
#include "eddy.oudf"
#endif

void UDF_LoadKernels(occa::properties &kernelInfo)
{
  kernelInfo["defines/p_pi"] = M_PI;
  kernelInfo["defines/p_omega"] = P_OMEGA;
  kernelInfo["defines/p_U0"] = P_U0;
  kernelInfo["defines/p_V0"] = P_V0;

  dfloat viscosity;
  platform->options.getArgs("VISCOSITY", viscosity);
  kernelInfo["defines/p_visc"] = viscosity;
}

void UDF_Setup0(MPI_Comm comm, setupAide &options)
{
  dfloat viscosity;
  options.getArgs("VISCOSITY", viscosity);

  platform->par->extract("casedata", "p_u0", P_U0);
  platform->par->extract("casedata", "p_v0", P_V0);
  platform->par->extract("casedata", "p_omega", P_OMEGA);
  P_OMEGA *= M_PI;

  if (platform->options.compareArgs("BUILD ONLY", "FALSE")) {
    double *const nek_cb_scnrs = (double *)nek::ptr("cb_scnrs");
    nek_cb_scnrs[0] = P_U0;
    nek_cb_scnrs[1] = P_V0;
    nek_cb_scnrs[2] = P_OMEGA;
    nek_cb_scnrs[3] = viscosity;
  }
}

void userq(nrs_t *nrs, double time, occa::memory o_S, occa::memory o_FS)
{
  mesh_t *mesh = nrs->meshV;
  cds_t *cds = nrs->cds;
  dpdx(mesh->Nelements,
       mesh->o_vgeo,
       mesh->o_invLMM,
       mesh->o_D,
       nrs->o_P,
       o_FS);
  oogs::startFinish(o_FS, 1, nrs->fieldOffset, ogsDfloat, ogsAdd, nrs->gsh);
}

void UDF_Setup(nrs_t *nrs) {
  udf.sEqnSource = &userq;
}

void UDF_ExecuteStep(nrs_t *nrs, dfloat time, int tstep)
{

  auto *mesh = nrs->meshV;
  if (platform->options.compareArgs("MOVING MESH", "TRUE")) {
    userMeshVelocity(mesh->Nlocal, nrs->fieldOffset, mesh->o_x, mesh->o_y, mesh->o_z, mesh->o_U);
  }

  constexpr int nStepAnalytical = 5;
  if (tstep <= nStepAnalytical) {
    exactUVWP(mesh->Nlocal, nrs->fieldOffset, time, mesh->o_x, mesh->o_y, mesh->o_z, nrs->o_U, nrs->o_P);
    nrs->o_U.copyTo(nrs->cds->o_S, nrs->fieldOffset);
    ellipticZeroMean(nrs->pSolver, nrs->o_P);
  }

  auto o_Uexact = platform->o_memPool.reserve<dfloat>(nrs->NVfields * nrs->fieldOffset);
  auto o_Pexact = platform->o_memPool.reserve<dfloat>(nrs->fieldOffset);
  auto o_Sexact = platform->o_memPool.reserve<dfloat>(nrs->fieldOffset);
  exactUVWP(mesh->Nlocal, nrs->fieldOffset, time, mesh->o_x, mesh->o_y, mesh->o_z, o_Uexact, o_Pexact);
  ellipticZeroMean(nrs->pSolver, o_Pexact);
  o_Uexact.copyTo(o_Sexact, nrs->fieldOffset);

  platform->linAlg->axpbyMany(mesh->Nlocal,
    nrs->NVfields,
    nrs->fieldOffset,
    1.0,
    nrs->o_U,
    -1.0,
    o_Uexact);
  platform->linAlg->axpby(mesh->Nlocal, 1.0, nrs->o_P, -1.0, o_Pexact);
  platform->linAlg->axpby(mesh->Nlocal, 1.0, nrs->cds->o_S, -1.0, o_Sexact);
  
  auto o_UerrX = o_Uexact + 0 * nrs->fieldOffset;
  auto o_UerrY = o_Uexact + 1 * nrs->fieldOffset;
  auto o_UerrZ = o_Uexact + 2 * nrs->fieldOffset;

  platform->linAlg->abs(mesh->Nlocal, o_UerrX);
  platform->linAlg->abs(mesh->Nlocal, o_UerrY);
  platform->linAlg->abs(mesh->Nlocal, o_UerrZ);
  platform->linAlg->abs(mesh->Nlocal, o_Pexact);
  platform->linAlg->abs(mesh->Nlocal, o_Sexact);

  const auto LinfUx = platform->linAlg->max(mesh->Nlocal, o_UerrX, platform->comm.mpiCommParent);
  const auto LinfUy = platform->linAlg->max(mesh->Nlocal, o_UerrY, platform->comm.mpiCommParent);
  const auto LinfUz = platform->linAlg->max(mesh->Nlocal, o_UerrZ, platform->comm.mpiCommParent);
  const auto LinfP = platform->linAlg->max(mesh->Nlocal, o_Pexact, platform->comm.mpiCommParent);
  const auto LinfS = platform->linAlg->max(mesh->Nlocal, o_Sexact, platform->comm.mpiCommParent);

  if(platform->comm.mpiRank == 0){
    printf("LinfUx = %g, LinfUy = %g, LinfUz = %g, LinfP = %g, LinfS = %g\n", LinfUx, LinfUy, LinfUz, LinfP, LinfS);
  }
}
